#!/usr/bin/perl

use Test;
BEGIN { plan tests => 11}

$basedir = $0;  $basedir =~ s|(.*)/[^/]*|$1|;

if (($pid = fork()) == 0) {
    $result = system "runas -t test_socket_base_t $basedir/sink stream";
    exit;
}

sleep 1; # Need to slow down and give the server time to start...

# Check permissions for basic socket operations
$output = `runas -t test_socket_base_t -- $basedir/options stream`;
&reformat_results($output, 0);

# Try to connect to the server from a domain that doesn't have recvfrom
# permission (this should fail).
$result = system "runas -t test_socket_norecv_t -- $basedir/source stream";
ok($result);

# Try to connect to the server from a domain that doesn't have connectto
# permission (this should fail).
$result = system "runas -t test_socket_noconnect_t -- $basedir/source stream";
ok($result);

# Default policy allows domains to perform any access on 
# sockets that they created.
$result = system "runas -t test_socket_base_t -- $basedir/source stream";
ok($result, 0);

if (($pid = fork()) == 0) {
    $result = system "runas -t test_socket_base_t $basedir/sink udp";
    exit;
}

sleep 1; # Need to slow down and give the server time to start...

# Domain can't create socket
$result = system "runas -t test_socket_none_t -- $basedir/source udp";
ok($result);

$result = system "runas -t test_socket_base_t -- $basedir/source udp";
ok($result, 0);
#print "test1: $result\n";

# Test the acceptfrom permission.  The server process does not have the
# acceptfrom permission, so the sending process will fail.
if (($pid = fork()) == 0) {
    exec "runas -t test_socket_noconnect_t $basedir/sink stream";
}

sleep 1; # Need to slow down and give the server time to start...

$result = system "runas -t test_socket_base_t -- $basedir/source stream";
ok($result);
# Kill the child server to clean up after the test.
#print "Kill process $pid\n";
kill 9, $pid;

#
# Get the SID to transition to after opening the socket
#
$output = `id`;
$output =~ /uid=\d+\((\w+)\).*context=(\w+):(\w+):(\w+)/ || die ("Can't determine user's id\n");
$user = $2;
$role = $3;
$new_sid = `context_to_sid $user:$role:test_socket_noaccept_t`;
chop($new_sid);

$result = system "runas -t test_socket_base_t $basedir/noaccept $new_sid";
ok($result);


exit;

# ================================================================= #
# Miscellaneous Routines                                            #
# ================================================================= #
sub reformat_results {
	$list = shift;
	$expected = shift;
	for (split (' ', $list)) {
		ok($_, $expected);
	}
}
